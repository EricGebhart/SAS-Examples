
/*---------------------------------------------------------------eric-*/
/*-- This tagset implements table scrolling.  The default row batch --*/
/*-- size is 8.  %let scroll_batch_size  to any other number to     --*/
/*-- change it.  The batch size can also be set on the url when     --*/
/*-- invoking the page.                                             --*/
/*--                                                                --*/
/*-- This tagset inherits from htmlpanel so that automatic          --*/
/*-- panelling of output is also available.                         --*/
/*------------------------------------------------------------27Apr04-*/
proc template;
   define tagset tagsets.htmlscroll;
       parent=tagsets.html4;
       
       mvar scroll_batch_size;
       mvar scroll_long_table_length;
       mvar scroll_control_images;
       
       
       define event set_scroll_options_default;
           set $default_scroll_batch_size '8';
           set $default_scroll_long_table_length '(2*batch_size)+1';
           unset $default_scroll_control_images;
           /*set $default_scroll_control_images 'True';*/
       end;

       define event set_scroll_options;
           trigger set_scroll_options_default;
           unset $scroll_batch_size;
           unset $scroll_long_table_length;
           unset $scroll_control_images;
           set $scroll_batch_size $options['SCROLL_BATCH_SIZE'] /if $options;
           set $scroll_batch_size scroll_batch_size /if ^$scroll_batch_size;
           set $scroll_batch_size $default_scroll_batch_size /if ^$scroll_batch_size;

           set $scroll_long_table_length $options['SCROLL_LONG_TABLE_LENGTH'] /if $options;
           set $scroll_long_table_length scroll_long_table_length /if $scroll_long_table_length;
           set $scroll_long_table_length $default_scroll_long_table_length /if ^$scroll_long_table_length;
           
           do /if $options['SCROLL_CONTROL_IMAGES'];
               set $scroll_control_images $options['SCROLL_CONTROL_IMAGES'];
           else /if scroll_control_images;
               set $scroll_control_images "true" /if cmp(scroll_control_images, "yes");
           else;
               set $scroll_control_images $default_scroll_control_images;
           done;
       end;

       define event code_body;
           trigger scroll_code;
           trigger contents_code;
       end;

       define event javascript;
           start:
               trigger javascript_tag start;
               trigger scroll_code /if !any(code_name, code_url);
           finish:
               trigger javascript_tag finish;
       end;

       define event ie_check;
           trigger javascript_tag start;
           put 'var _info = navigator.userAgent' CR;
           put 'var _ie = (_info.indexOf("MSIE") > 0' CR;
           put '          && _info.indexOf("Win") > 0' CR;
           put '          && _info.indexOf("Windows 3.1") < 0);' CR;
           set $ieCheckDone "true";
           trigger javascript_tag finish;
       end;

       define event doc_body;
           put '<body';
           put ' onload="setupLongTables()"';
           put  ' bgproperties="fixed"' / WATERMARK;
           putq " class=" HTMLCLASS;
           putq " background=" BACKGROUNDIMAGE;
           trigger style_inline;
           put ">" CR;
           trigger pre_post;
           put          CR;
           trigger ie_check;
         finish:
           trigger pre_post;
           put "</body>" CR;
        end;

       define event code_link;
           put "<script";
           putq " src=" code_name /if !exists(code_url);
           putq " src=" code_url /if exists(code_url);
           put ' language="javascript" type="text/javascript">';
           put "</script>" CR;
           put "<noscript></noscript>" CR;
       end;
       
       define event image_names;
           set $top_image       'top.png';
           set $page_up_image   'pageup.png';
           set $up_image        'up.png';
           set $down_image      'down.png';
           set $page_down_image 'pagedown.png';
           set $bottom_image    'bottom.png';
       end;
        
       define event scroll_code;

           /* set up the values for any tagset options we may or may not have received */
           trigger set_scroll_options;

           putl "//";
           putl "// Scrollable Tables";
           putl "// =================";
           putl "//";
           putl "// This javascript file can be included in any HTML document that ";
           putl "// contains data tables.  It will convert excessively long tables";
           putl "// into smaller tables that are scrollable.  ";
           putl "//";
           putl "// To use it, simply include the Javascript in your document and ";
           putl "// run `setupLongTables()` in the onload event of the <body> tag.";
           putl "//";
           putl '//    <script language="javascript" src="scrolltable.js"></script>';
           putl "//";
           putl "//  Then add setupLongTables() to the onload= event of your <body> tag.";
           putl "//";
           putl '//    <body onload="setupLongTables()">';
           putl "//";
            putl "//";
            putl "// Two parameters are used to control the detection of an excessively";
            putl "// long table, and the number of rows to be displayed in a converted";
            putl "// table: long_table_length and batch_size.  These can be hard-coded";
            putl "// below or added to the URL as parameters.";
            putl "//";
            putl "// Examples::";
            putl "//     http://www.foo.com/mytables.html?batch_size=3";
            putl '//     http://www.foo.com/mytables.html?batch_size=3&long_table_length=20';
            putl "//";
            putl "// It is also possible to use images to invoke the scrolling instead ";
            putl "// of the default text.  Simply define the variables `top_image`, ";
            putl "// `page_up_image`, `up_image`, `down_image`, `page_down_image`,";
            putl "// and `bottom_image` to contain the path to each image.";
            putl "//";
            putl "// This code should work in any browser that supports DOM (i.e. MSIE 5.5+,";
            putl "// Safari, Mozilla, etc.).";
            putl "//";
            putl "// Known Issues";
            putl "// ------------";
            putl "//";
            putl "// Some browsers have issues with code that messes with already rendered";
            putl "// table structures.  You may see some artifacts of this in table";
            putl "// borders while scrolling a table.";
            putl "//";
            putl "// Bugs/Comments: Kevin.Smith@sas.com";
            putl "//";
            putl "";
            putl "// Number of rows to show in each batch of the table";

            putl "var batch_size =" $scroll_batch_size ";";

            putl "";
            putl "// Minimum length of table before batching should occur";
            putl "var long_table_length =" $scroll_long_table_length ";";
            putl "";
            putl "// Buttons to use for table batch navigation (undefined, by default)";
            putl "var top_image = '';";
            putl "var page_up_image = ''; ";
            putl "var up_image = '';";
            putl "var down_image = '';";
            putl "var page_down_image = '';";
            putl "var bottom_image = '';";
            putl "";
            do /if $scroll_control_images;
                trigger image_names;
                putl "var top_image = '" $top_image "';";
                putl "var page_up_image = '" $page_up_image "';";
                putl "var up_image = '" $up_image "';";
                putl "var down_image = '" $down_image "';";
                putl "var page_down_image = '" $page_down_image "';";
                putl "var bottom_image = '" $bottom_image "';";
            done;
            putl "";
            putl "if ( !top_image )";
            putl "{";
            putl "    var top_button = document.createTextNode('[top]');";
            putl "    var page_up_button = document.createTextNode('[page up]');";
            putl "    var up_button = document.createTextNode('[up]');";
            putl "    var down_button = document.createTextNode('[down]');";
            putl "    var page_down_button = document.createTextNode('[page down]');";
            putl "    var bottom_button = document.createTextNode('[bottom]');";
            putl "} else {";
            putl "    var top_button = document.createElement('img');";
            putl "    top_button.setAttribute('src',top_image);";
            putl "    var page_up_button = document.createElement('img');";
            putl "    page_up_button.setAttribute('src',page_up_image);";
            putl "    var up_button = document.createElement('img');";
            putl "    up_button.setAttribute('src',up_image);";
            putl "    var down_button = document.createElement('img');";
            putl "    down_button.setAttribute('src',down_image);";
            putl "    var page_down_button = document.createElement('img');";
            putl "    page_down_button.setAttribute('src',page_down_image);";
            putl "    var bottom_button = document.createElement('img');";
            putl "    bottom_button.setAttribute('src',bottom_image);";
            putl "}";
            putl "";
            putl "// See if the batch_size and long_table_length have been overridden";
            putl "// in the URL variables";
            putl "var qs = location.search.substring(1);";
            putl 'var nv = qs.split(''&'');';
            putl "var url = new Object();";
            putl "for (var i = 0; i < nv.length; i++)";
            putl "{";
            putl "    var part = nv[i];";
            putl "    eq = part.indexOf('=');";
            putl "    key = part.substring(0,eq).toLowerCase();";
            putl "    value = unescape(part.substring(eq+1));";
            putl "    if (key == 'batch_size')";
            putl "        batch_size = parseInt(value);";
            putl "    else if (key == 'long_table_length')";
            putl "        long_table_length = parseInt(value);";
            putl "}";
            putl "    ";
            putl "function eventObject(event)";
            putl "//";
            putl "// Get the event object for all browsers";
            putl "//";
            putl "{";
            putl "    if (event.target) return event.target;";
            putl "    else if (event.srcElement) return event.srcElement;";
            putl "}";
            putl "";
            putl "function getDataRows(event)";
            putl "//";
            putl "// Get a collection of all of the rows that are in TBODY tags";
            putl "// for the table adjacent to the element that was clicked.";
            putl "//";
            putl "{";
            putl "    elem = eventObject(event);";
            putl "";
            putl "    // Find the table wrapping the navigation and data tables";
            putl "    var table = elem.parentNode;";
            putl '    while (table && table.nodeName != ''TABLE'')';
            putl "        table = table.parentNode;";
            putl "    if (!table) return;";
            putl "    table = table.parentNode;";
            putl '    while (table && table.nodeName != ''TABLE'')';
            putl "        table = table.parentNode;";
            putl "    if (!table) return;";
            putl "";
            putl "    table = table.getElementsByTagName('table')[0];";
            putl "    var tbody = table.getElementsByTagName('tbody');";
            putl "    var rows = Array();";
            putl "    for (var j = 0; j < tbody.length; j++)";
            putl "    {";
            putl "        var tr = tbody[j].getElementsByTagName('tr');";
            putl "        for (var k = 0; k < tr.length; k++) ";
            putl "            rows[rows.length] = tr[k];";
            putl "    }";
            putl "    return rows;";
            putl "}";
            putl "";
            putl "function tablePrevious(event,scroll_rows)";
            putl "//";
            putl "// Jump down 'scroll_rows' in the table";
            putl "//";
            putl "{";
            putl "    if (scroll_rows == -1)";
            putl "        scroll_rows = batch_size;";
            putl "";
            putl "    var rows = getDataRows(event);";
            putl "";
            putl "    // Bail out early if the first row is already displayed";
            putl "    if (isVisible(rows[0]))";
            putl "        return;";
            putl "";
            putl "    var first_displayed_row = 0;";
            putl "    for (var i = 0; i < rows.length; i++)";
            putl "    {";
            putl "        if (isVisible(rows[i]))";
            putl "        {";
            putl "            first_displayed_row = i - scroll_rows;";
            putl "            if (scroll_rows > 1)";
            putl "                first_displayed_row += 1;";
            putl "            for (var j = 0; j < batch_size; j++)";
            putl "                hideRow(rows[i+j]);";
            putl "            break;";
            putl "        }";
            putl "    } ";
            putl "    if (first_displayed_row < 0)";
            putl "        first_displayed_row = 0;";
            putl "    for (var i = 0; i < batch_size; i++)";
            putl "        displayRow(rows[i+first_displayed_row]);";
            putl "";
            putl "    var status = getStatusCell(eventObject(event));";
            putl "    updateRowStatus(status, first_displayed_row+1, ";
            putl "                            first_displayed_row+batch_size,";
            putl "                            rows.length);";
            putl "}";
            putl "";
            putl "function tableTop(event)";
            putl "//";
            putl "// Jump to the top of the table";
            putl "//";
            putl "{";
            putl "    var rows = getDataRows(event);";
            putl "";
            putl "    // Bail out early if the first row is already displayed";
            putl "    if (isVisible(rows[0]))";
            putl "        return;";
            putl "";
            putl "    // Hide all rows";
            putl "    for (var i = 0; i < rows.length; i++)";
            putl "        hideRow(rows[i]);";
            putl "";
            putl "    // Show top rows";
            putl "    for (var i = 0; i < batch_size; i++)";
            putl "        displayRow(rows[i]);";
            putl "";
            putl "    var status = getStatusCell(eventObject(event));";
            putl "    updateRowStatus(status, 1, batch_size, rows.length);";
            putl "}";
            putl "";
            putl "function tableBottom(event)";
            putl "//";
            putl "// Jump to the bottom of the table";
            putl "//";
            putl "{";
            putl "    var rows = getDataRows(event);";
            putl "";
            putl "    // Bail out early if the last row is already displayed";
            putl "    if (isVisible(rows[rows.length-1]))";
            putl "        return;";
            putl "";
            putl "    // Hide all rows";
            putl "    for (var i = 0; i < rows.length; i++)";
            putl "        hideRow(rows[i]);";
            putl "";
            putl "    // Show bottom rows";
            putl "    for (var i = rows.length-1; i >= (rows.length-batch_size); i--)";
            putl "        displayRow(rows[i]);";
            putl "";
            putl "    var status = getStatusCell(eventObject(event));";
            putl "    updateRowStatus(status, rows.length-batch_size+1, rows.length, rows.length);";
            putl "}";
            putl "";
            putl "function tableNext(event,scroll_rows)";
            putl "//";
            putl "// Jump down 'scroll_rows' in the table";
            putl "//";
            putl "{";
            putl "    if (scroll_rows == -1)";
            putl "        scroll_rows = batch_size;";
            putl "";
            putl "    var rows = getDataRows(event);";
            putl "";
            putl "    // Bail out early if the last row is already displayed";
            putl "    if (isVisible(rows[rows.length-1]))";
            putl "        return;";
            putl "";
            putl "    var first_displayed_row = 0;";
            putl "    for (var i = 0; i < rows.length; i++)";
            putl "    {";
            putl "        if (isVisible(rows[i]))";
            putl "        {";
            putl "            first_displayed_row = i + scroll_rows;";
            putl "            if (scroll_rows > 1)";
            putl "                first_displayed_row -= 1;";
            putl "            for (var j = 0; j < batch_size; j++)";
            putl "                hideRow(rows[i+j]);";
            putl "            break;";
            putl "        }";
            putl "    } ";
            putl "    if ((first_displayed_row + batch_size) > (rows.length - 1))";
            putl "        first_displayed_row = rows.length - batch_size;";
            putl "    for (var i = 0; i < batch_size; i++)";
            putl "        displayRow(rows[i+first_displayed_row]);";
            putl "";
            putl "    var status = getStatusCell(eventObject(event));";
            putl "    updateRowStatus(status, first_displayed_row+1, ";
            putl "                            first_displayed_row+batch_size,";
            putl "                            rows.length);";
            putl "}";
            putl "";
            putl "function hideRow(row)";
            putl "//";
            putl "// Hide the given row";
            putl "//";
            putl "{";
            putl "    row.style.display = 'none';";
            putl "}";
            putl "";
            putl "function displayRow(row)";
            putl "//";
            putl "// Unhide the given row";
            putl "//";
            putl "{";
            putl "    row.style.display = '';";
            putl "}";
            putl "";
            putl "function isHidden(obj)";
            putl "//";
            putl "// Is the given object hidden?";
            putl "//";
            putl "{";
            putl "    if (obj.style.display == 'none')";
            putl "        return true;";
            putl "    return false;";
            putl "}";
            putl "";
            putl "function isVisible(obj)";
            putl "//";
            putl "// Is the given object visible?";
            putl "//  ";
            putl "{";
            putl "    return !isHidden(obj);";
            putl "}";
            putl "";
            putl "function getStatusCell(obj)";
            putl "//";
            putl "// Get the cell that contains the row status for the associated table";
            putl "//";
            putl "{";
            putl "    var navtable = obj.parentNode;";
            putl "    while (navtable.nodeName != 'TABLE')";
            putl "        navtable = navtable.parentNode;";
            putl "";
            putl "    var cells = navtable.getElementsByTagName('TD');";
            putl "    for (var i = 0; i < cells.length; i++)";
            putl "    {";
            putl "        if (cells[i].className == 'longtablestatus')";
            putl "            return cells[i];";
            putl "    }";
            putl "    return null;";
            putl "}";
            putl "";
            putl "function updateRowStatus(status, begin, end, total)";
            putl "//";
            putl "// Update the displayed row status";
            putl "// ";
            putl "{";
            putl "    var position = document.createElement('DIV');";
            putl "    position.appendChild(document.createTextNode(begin+'-'+end));";
            putl "    position.appendChild(document.createElement('BR'));";
            putl "    position.appendChild(document.createTextNode('of'));";
            putl "    position.appendChild(document.createElement('BR'));";
            putl "    position.appendChild(document.createTextNode(total));";
            putl "    status.appendChild(position);";
            putl "    status.removeChild(status.firstChild);";
            putl "}";
            putl "";
            putl "function setupLongTables()";
            putl "//";
            putl "// Hide all rows in tables that aren't in the first batch";
            putl "//";
            putl "{";
            putl "    if (long_table_length < 1) return;";
            putl "";
            putl "    var tables = document.getElementsByTagName('table');";
            putl "    for (var i = 0; i < tables.length; i++)";
            putl "    {";
            putl "";
            putl "        // Don't do this if the table contains a table";
            putl "        if (tables[i].getElementsByTagName('table').length > 1)";
            putl "            continue;";
            putl "";
            putl "        // Hide rows";
            putl "        var tbodies = tables[i].getElementsByTagName('tbody');";
            putl "        var rows = Array();";
            putl "        for (var j = 0; j < tbodies.length; j++)";
            putl "        {";
            putl "            var current = tbodies[j].getElementsByTagName('tr');";
            putl "            for (var k = 0; k < current.length; k++) ";
            putl "                rows[rows.length] = current[k];";
            putl "        }";
            putl "";
            putl "        // Only do this on long tables";
            putl "        if (rows.length < long_table_length)";
            putl "            continue;";
            putl "";
            putl "        for (var j = 0; j < rows.length; j++)";
            putl "        {";
            putl "            if (j < batch_size)";
            putl "                displayRow(rows[j]);";
            putl "            else";
            putl "                hideRow(rows[j]);";
            putl "        }";
            putl "";
            putl "        var table = tables[i];";
            putl "        var tparent = table.parentNode;";
            putl "        var navwrapper = document.createElement('DIV');        ";
            putl "        navwrapper.className = 'tablenavwrapper';";
            putl "";
            putl "        // Swap wrapper and data table in the original document";
            putl "        tparent.replaceChild(navwrapper,table);";
            putl "";
            putl "        navwrapper.appendChild(table);";
            putl "        var navtable = tableNavigator();";
            putl "        navwrapper.appendChild(navtable);";
            putl "";
            putl "        var cells = navtable.getElementsByTagName('TD');";
            putl "        for (var c = 0; c < cells.length; c++)";
            putl "        {";
            putl "            if (cells[c].className == 'longtablestatus')";
            putl "            {";
            putl "                updateRowStatus(cells[c], 1, batch_size, rows.length);";
            putl "                break;";
            putl "            }";
            putl "        }";
            putl "    }";
            putl "";
            putl "    // Swap the DIV out for a table.  This had to be done in a ";
            putl "    // separate step because the browsers didn't like it when I";
            putl "    // was swapping in-and-out tables while iterating over them.";
            putl "    var divs = document.getElementsByTagName('DIV');";
            putl "    for (var i = 0; i < divs.length; i++)";
            putl "    {";
            putl "        var current = divs[i];";
            putl "        var cparent = current.parentNode;";
            putl "        if (current.className != 'tablenavwrapper')";
            putl "            continue;";
            putl " ";
            putl "        var table = document.createElement('TABLE');";
            putl "        var tbody = document.createElement('TBODY');";
            putl "        var row = document.createElement('TR');";
            putl "        var datacell = document.createElement('TD');";
            putl "        datacell.appendChild(current.firstChild);";
            putl "        var navcell = document.createElement('TD');";
            putl "        navcell.appendChild(current.lastChild);";
            putl "";
            putl "        for (var j = 0; j < cparent.childNodes.length; j++)";
            putl "            cparent.removeChild(cparent.firstChild);";
            putl "";
            putl "        // Build the final table with data and navigation";
            putl "        table.appendChild(tbody);";
            putl "        tbody.appendChild(row);";
            putl "        row.appendChild(datacell);";
            putl "        row.appendChild(navcell);";
            putl "        cparent.appendChild(table);";
            putl "    }";
            putl "";
            putl "}";
            putl "";
            putl "";
            putl "function tableNavigator()";
            putl "//";
            putl "// Create a table that contains table navigation buttons";
            putl "//";
            putl "{";
            putl "    var table = document.createElement('TABLE');";
            putl "    var tbody = document.createElement('TBODY');";
            putl "";
            putl "    // Append buttons that navigate up";
            putl "    tbody.appendChild(navigatorCell('up','tableTop(event)',top_button.";
            putl "                                    cloneNode(true)));";
            putl "    tbody.appendChild(navigatorCell('up','tablePrevious(event,-1)',";
            putl "                                    page_up_button.cloneNode(true)));";
            putl "    tbody.appendChild(navigatorCell('up','tablePrevious(event,1)',";
            putl "                                    up_button.cloneNode(true)));";
            putl "";
            putl "    // Append displayed row status cell";
            putl "    var tr = document.createElement('TR');";
            putl "    var cell = document.createElement('TD');";
            putl "    cell.className = 'longtablestatus';";
            putl "    cell.style.textAlign = 'center';";
            putl "    cell.style.verticalAlign = 'middle';";
            putl "    cell.style.fontSize = 'small';";
            putl "    cell.style.height = '100px';";
            putl "    cell.appendChild(document.createTextNode(''));";
            putl "    updateRowStatus(cell,'#','#','#');";
            putl "    tr.appendChild(cell);";
            putl "    tbody.appendChild(tr);";
            putl "";
            putl "    // Append buttons that navigate down";
            putl "    tbody.appendChild(navigatorCell('down','tableNext(event,1)',";
            putl "                                    down_button.cloneNode(true)));";
            putl "    tbody.appendChild(navigatorCell('down','tableNext(event,-1)',";
            putl "                                    page_down_button.cloneNode(true)));";
            putl "    tbody.appendChild(navigatorCell('down','tableBottom(event)',";
            putl "                                    bottom_button.cloneNode(true)));";
            putl "";
            putl "    table.appendChild(tbody);";
            putl "    return table;";
            putl "}";
            putl "";
            putl "function navigatorCell(name,onclick,button)";
            putl "//";
            putl "// Utility function to create button for table navigator";
            putl "//";
            putl "{";
            putl "    var link = document.createElement('A');";
            putl "    link.setAttribute('name',name);";
            putl "    if (navigator.appVersion.indexOf('MSIE') > 0)";
            putl "        link.onclick = new Function(onclick);";
            putl "    else";
            putl "        link.setAttribute('onclick','javascript:'+onclick+';return false');";
            putl "    link.style.cursor = 'hand';";
            putl "    link.appendChild(button);";
            putl "    var cell = document.createElement('TD');";
            putl "    cell.appendChild(link);";
            putl "    cell.style.textAlign = 'center';";
            putl "    var row = document.createElement('TR');";
            putl "    row.appendChild(cell);";
            putl "    return row";
            putl "}";
            put  nl;
        end;
        
    end;
    

